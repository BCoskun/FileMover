import com.beust.jcommander.JCommander;
import com.beust.jcommander.Parameter;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.DirectoryStream;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Calendar;
import java.util.Date;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    
    @Parameter(names={"--CleanUpFolder", "-cuf"},description="Cleanup folder that will pull the files from!",required=true)
    private static String cleanUpFolder = ".";
    
    @Parameter(names={"--destinationFoler", "-df"}, description="Destination folder that the files will be moved to!")
    private static String destinationFolder = ".";

    @Parameter(names={"--LogFileName", "-lfn"}, description="Log File Name.")
    static String logFileName = "MovedFiles.txt";

    @Parameter(names={"--MaxBatchCount", "-mbc"},description="How many 'Batch' will execute!")
    private static int BatchCountMax = 1;
    
    @Parameter(names={"--BatchSize", "-bs"}, description="How many records will be in the each batch!")
    private static int FileCountLimit = 5000;

    volatile boolean beReadyForShutDown = false;
    volatile boolean isReadyToShutDown = false;

    @Parameter(names={"--Simulation", "-s"},description="Is this execution simulation. If yes, the files will not be moved.", arity=1)
    Boolean Simulation = true;

    @Parameter(names = "--help", help = true, description="This options shows parameters help!")
    private boolean help;
    public boolean ExecuteBatch(String logName){

            int filecount = 0;

            try {
            
                Calendar cal = Calendar.getInstance();
                FileWriter fw = new FileWriter(logName, true);
                BufferedWriter bw = new BufferedWriter(fw);
                PrintWriter out = new PrintWriter(bw);

                try {
                    DirectoryStream<Path> stream = Files
                            .newDirectoryStream(FileSystems.getDefault().getPath(cleanUpFolder));

                    for (Path entry : stream) {
                    
                        Date fileDate = new Date(entry.toFile().lastModified());
                        cal.setTime(fileDate);

                        String Year = String.format("%04d", cal.get(Calendar.YEAR));
                        String Month = String.format("%02d", cal.get(Calendar.MONTH) + 1);
                        String Day = String.format("%02d", cal.get(Calendar.DAY_OF_MONTH));

                        Path DestinationPath = FileSystems.getDefault().getPath(destinationFolder);
                        System.out.println(
                                entry.getFileName() + " | " + entry.toFile().isDirectory() + " | " + Year + Month + Day);

                        if (!entry.toFile().isDirectory()) {

                        // Check Year
                            DestinationPath = Paths.get(DestinationPath.toString(), Year);
                            if (!Files.exists(DestinationPath)) {
                                Files.createDirectory(DestinationPath);
                            }

                            // Check Month
                            DestinationPath = Paths.get(DestinationPath.toString(), Month);
                            if (!Files.exists(DestinationPath)) {
                                Files.createDirectory(DestinationPath);
                            }

                             // Check Day
                            DestinationPath = Paths.get(DestinationPath.toString(), Day);
                            if (!Files.exists(DestinationPath)) {
                                Files.createDirectory(DestinationPath);
                            }

                            Path DestinationFile = Paths.get(DestinationPath.toString(), entry.getFileName().toString());                            
                            if (!Simulation)
                                Files.move(entry, DestinationFile);

                            filecount++;
                            out.println(DestinationFile.toString());
                            
                            if (beReadyForShutDown) {
                                fw.flush();
                                out.close();
                                isReadyToShutDown =true;
                                return true;
                            }

                            if (filecount % 50 == 0) fw.flush();

                            if (filecount > FileCountLimit) {
                                fw.flush();
                                out.close();
                                return false;
                        }
                    }
                }

                fw.close();
                out.close();

            } catch (Exception e) {
                System.out.println(e);                
            }
            //more code
        } catch (IOException e) {
            System.out.println(e);
        }
        
        return true;

    }    
    public static void main(String[] args) {

        App app = new App();
        JCommander jc = JCommander.newBuilder()
            .addObject(app)
            .build();

        jc.parse(args);
    
        if (app.help) {
            jc.usage();
            return;
        }
        
        if ( app.Simulation) 
        {
            System.out.println("This is Simulation!!!!");
            logFileName = String.format("sim_%s", logFileName);
        }
        
        Runtime.getRuntime().addShutdownHook(new Thread(){
            public void run() {
                System.out.println("trying to shutdown!");
                try{
                    if ( !app.beReadyForShutDown ) app.beReadyForShutDown = true;

                    while(!app.isReadyToShutDown) {
                        Thread.sleep(5000);
                        System.out.println("Waiting to be ready for shutdown!");
                    }

                }catch(Exception e) {
                    System.out.println(e);
                }
            }
        });
     
        
        for(int batchcount = 1; batchcount <= BatchCountMax; batchcount++)
        {
            String logName = String.format("%d_%s", batchcount, logFileName);
            if ( app.ExecuteBatch(logName) )
            {            
                break;
            }
        }

        app.isReadyToShutDown = true;            
        System.out.println("Done...");
    }
}
